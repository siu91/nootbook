#!/bin/bash## @CreationTime#   2020/12/04 下午15:51:32# @ModificationDate#   2020/12/04 下午15:51:32# @Function#  监控是否是 keepalived 工作节点# @Usage## @author SiuPGM_PORT='5431'PGM_DATA_PATH='/pgafo/monitor/pgafomonitor'PGM_VIP='192.168.5.181'PGM_WORK_DIR=$(dirname ${PGM_DATA_PATH})VIP_INTERFACE='ens192'#echo "${PATH}"PATH="$PATH:/sbin"local_ip=$(ifconfig ens192|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2}'|tr -d "addr:"|head -n 1)master_ip=$(sudo su postgres -c "psql -d pg_auto_failover -p ${PGM_PORT} -h ${PGM_VIP} -f '/etc/keepalived/select.sql'" | head -n 3 | tail -n 1)master_ip=`echo $master_ip`set_primary_writable_when_all_standby_fail() {}sync_data() {  if command -v rsync >/dev/null 2>&1; then    # 判断 192.168.5.181 5431 是否通    `nc -z -v -w5 $PGM_VIP $PGM_PORT`    result1=$?    if [  "$result1" == 0 ]; then      if [[ $1 == "BACKUP" ]]; then      #rsync -av --delete --timeout=2 --exclude='*.pid' ${PGM_DATA_PATH} ${PGM_WORK_DIR}/backup/master_backup      #else      # 动态获取 MASTER IP      #sudo su postgres -c "psql -d pg_auto_failover -p 5431 -h 192.168.5.181 -c 'select * from pgautofailover.node'"      echo "select ip from pgautofailover.monitor where \"currentrole\"='MASTER' order by reporttime desc limit 1;" > /etc/keepalived/select.sql      echo "$(hostname -s)" "$(date "+%Y-%m-%d %H:%M:%S.%3N")" "同步主节点（$master_ip）数据"      rsync -av --delete --timeout=1 --exclude='*.pid' "$(whoami)"@"${master_ip}":${PGM_DATA_PATH} ${PGM_WORK_DIR}/backup/master_backup      fi    else      echo "$(hostname -s)" "$(date "+%Y-%m-%d %H:%M:%S.%3N")" "主节点服务未启动，跳过数据同步"    fi  else    echo "$(hostname -s)" "$(date "+%Y-%m-%d %H:%M:%S.%3N")" "rsync 命令不可用"  fi}report_state() {  change_type='0'  if [[ "$1" != "$2" ]]; then      change_type="$2->$1"  fi  if [[ "${change_type}" == "0" ]]; then        echo "INSERT INTO \"pgautofailover\".\"monitor\"(\"ip\", \"nodename\", \"currentrole\", \"lastrole\", \"failovertype\") VALUES ( '${local_ip}', '$(hostname -s)', '$1', '$2', '0') ON CONFLICT (\"ip\") DO UPDATE SET \"nodename\"='$(hostname -s)',\"currentrole\" = '$1', \"lastrole\" = '$2',\"reporttime\"=CURRENT_TIMESTAMP(0);" >/etc/keepalived/insert1.sql        sudo su postgres -c "psql -d pg_auto_failover -p ${PGM_PORT} -h ${PGM_VIP} -f /etc/keepalived/insert1.sql"  else        echo "INSERT INTO \"pgautofailover\".\"monitor\"(\"ip\", \"nodename\", \"currentrole\", \"lastrole\", \"failovertype\") VALUES ( '${local_ip}', '$(hostname -s)', '$1', '$2', '${change_type}') ON CONFLICT (\"ip\") DO UPDATE SET \"nodename\"='$(hostname -s)',\"currentrole\" = '$1', \"lastrole\" = '$2',\"failovertime\"=CURRENT_TIMESTAMP(0),\"failovertype\"='${change_type}',\"reporttime\"=CURRENT_TIMESTAMP(0);" >/etc/keepalived/insert2.sql        sudo su postgres -c "psql -d pg_auto_failover -p ${PGM_PORT} -h ${PGM_VIP} -f /etc/keepalived/insert2.sql"        echo "INSERT INTO \"pgautofailover\".\"monitorevent\"(\"ip\", \"nodename\", \"currentrole\", \"lastrole\", \"failovertype\") VALUES ( '${local_ip}', '$(hostname -s)', '$1', '$2', '${change_type}');" >/etc/keepalived/insert3.sql        sudo su postgres -c "psql -d pg_auto_failover -p ${PGM_PORT} -h ${PGM_VIP} -f /etc/keepalived/insert3.sql"  fi  echo "$(hostname -s)" "$(date "+%Y-%m-%d %H:%M:%S.%3N")" "报告状态 $2->$1($change_type)"}# 主节点备份backup_monitor_data() {  check_root_user  if [[ $(hostname -s) == "${PG_AFOM_HOSTNAME}" ]]; then    backup_path=$(date "+%Y%m%d%H%M%S")    sudo mkdir -p "${PGM_WORK_DIR}/backup/${backup_path}"    sudo chown -R postgres:postgres ${PGM_WORK_DIR}/backup    sudo pg_basebackup -U postgres -Ft -Pv -Xf -z -Z5 -p ${PGM_PORT} -D "${PGM_WORK_DIR}/backup/${backup_path}"    sudo cp -f "${PGM_WORK_DIR}/backup/${backup_path}/base.tar.gz" "${PGM_WORK_DIR}/backup/latest_backup.tar.gz"    echo "$(hostname -s)" "$(date "+%Y-%m-%d %H:%M:%S.%3N")" "备份 monitor 数据"  fi  clean_old_backup_monitor_data}clean_old_backup_monitor_data() {  #保留文件数  ReservedNum=100  FileDir=${PGM_WORK_DIR}/backup/  FileNum=$(ls -l $FileDir | grep 2 | wc -l)  while (($FileNum > $ReservedNum)); do    OldFile=$(ls -rt $FileDir | head -1)    echo "$(hostname -s)" "$(date "+%Y-%m-%d %H:%M:%S.%3N")" "删除旧的备份数据:"${OldFile}    rm -rf ${FileDir}/${OldFile}    let "FileNum--"  done}recovery_data() {  echo "$(hostname -s)" "$(date "+%Y-%m-%d %H:%M:%S.%3N")" "从 BACKUP->MASTER 需要恢复数据"  #rm -rf ${PGM_DATA_PATH}  mv ${PGM_DATA_PATH} ${PGM_DATA_PATH}_"$(date "+%Y%m%d%H%M%S%3N")"  cp -r ${PGM_WORK_DIR}/backup/master_backup/* ${PGM_WORK_DIR}  chown -R postgres:postgres ${PGM_DATA_PATH}  chmod 700 ${PGM_DATA_PATH}  systemctl start pg10-afom  sleep 3  systemctl status pg10-afom  echo "$(hostname -s)" "$(date "+%Y-%m-%d %H:%M:%S.%3N")" "从 BACKUP->MASTER 恢复数据完成"  # 恢复完数据需要判断 pg10-afom 服务是否正常，不正常要恢复到最后一个备份版本的数据  process_num=$(ps -ef | grep postgres | grep monitor | grep -c ${PGM_PORT})  #if [ "$process_num" -eq 0 ]; then  #    echo "$(hostname -s)" "$(date "+%Y-%m-%d %H:%M:%S.%3N")" "pg10-afom 恢复异常，需要回退到最近一个备份"  #    rm -rf ${PGM_DATA_PATH}  #    mkdir -p ${PGM_DATA_PATH}  #    tar -xvzf "${PGM_WORK_DIR}"/backup/latest_backup.tar.gz -C ${PGM_DATA_PATH}  #    chown -R postgres:postgres ${PGM_DATA_PATH}  #    chmod 700 ${PGM_DATA_PATH}  #    systemctl start pg10-afom  #    systemctl status pg10-afom  #    echo "$(hostname -s)" "$(date "+%Y-%m-%d %H:%M:%S.%3N")" "pg10-afom 回退到最近一个备份完成"  #fi}monitor() {  #journalctl -u keepalived | grep 'Entering' | grep 'STATE'  #master_flag=$(journalctl -u keepalived | grep 'Entering' | grep 'STATE' | tail -1 | grep -c 'Entering MASTER STATE')  master_flag=$(ip a | grep -c ${PGM_VIP})  process_num=$(ps -ef | grep postgres | grep monitor | grep -c ${PGM_PORT})  if [ ! -f "/tmp/pgafom-status" ]; then    touch /tmp/pgafom-status  fi  last_status=$(cat /tmp/pgafom-status)  if [ "${master_flag}" -ne 0 ]; then    echo "$(hostname -s)" "$(date "+%Y-%m-%d %H:%M:%S.%3N")" "pg10-afom.service MASTER(${last_status})"    # 如果上次状态是 BACKUP 当前是 MASTER ，需要恢复最新数据    if [[ ${last_status} == "BACKUP" ]]; then      echo "$(hostname -s)" "$(date "+%Y-%m-%d %H:%M:%S.%3N")" "状态变化 BACKUP -> MASTER"      journalctl -u keepalived | grep 'Entering' | grep 'STATE'      recovery_data      report_state MASTER BACKUP    else      report_state MASTER MASTER    fi    echo 'MASTER' >/tmp/pgafom-status    if [ "$process_num" -eq 0 ]; then      systemctl start pg10-afom      systemctl status pg10-afom      echo "$(hostname -s)" "$(date "+%Y-%m-%d %H:%M:%S.%3N")" "systemctl start pg10-afom"    fi    if [ "$process_num" -ne 0 ]; then      echo "$(hostname -s)" "$(date "+%Y-%m-%d %H:%M:%S.%3N")" "pg10-afom 服务正常"    else      echo "$(hostname -s)" "$(date "+%Y-%m-%d %H:%M:%S.%3N")" "pg10-afom 服务异常"    fi  else    echo "$(hostname -s)" "$(date "+%Y-%m-%d %H:%M:%S.%3N")" "pg10-afom BACKUP(${last_status})"    #    if [[ ${last_status} == "MASTER" ]]; then      systemctl stop pg10-afom      echo "$(hostname -s)" "$(date "+%Y-%m-%d %H:%M:%S.%3N")" "状态变化 MASTER -> BACKUP"      journalctl -u keepalived | grep 'Entering' | grep 'STATE'      report_state BACKUP MASTER      sleep 0    else      report_state BACKUP BACKUP    fi    echo 'BACKUP' >/tmp/pgafom-status    sync_data 'BACKUP'    if [ "$process_num" -ne 0 ]; then      systemctl stop pg10-afom      systemctl status pg10-afom      echo "$(hostname -s)" "$(date "+%Y-%m-%d %H:%M:%S.%3N")" "systemctl stop pg10-afom"    fi  fi  #systemctl status pg10-afom}echo "#################################################START:$(date "+%Y-%m-%d %H:%M:%S.%3N")##################################################"monitorecho "#################################################END:$(date "+%Y-%m-%d %H:%M:%S.%3N")##################################################"exit 0